name: Python CD
on:
  push:
    branches: [ main, develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install kubectl
      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl" || { echo "Failed to download kubectl"; exit 1; }
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      
      # Install Kind
      - name: Set up Kind Kubernetes cluster
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Create Kind cluster
          kind create cluster --name github-actions-cluster
          
          # Get kubeconfig for the created cluster
          kind get kubeconfig --name github-actions-cluster > kubeconfig
          
          # Set KUBECONFIG environment variable
          export KUBECONFIG=$(pwd)/kubeconfig
          
          # Verify cluster is up
          kubectl get nodes

      # Install Helm
      - name: Set up Helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz || { echo "Failed to download Helm"; exit 1; }
          tar -zxvf helm-v3.6.3-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      # Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o /tmp/argocd
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd

      # Authenticate Docker to GitHub Container Registry
      - name: Authenticate Docker to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Pull Docker image
      - name: Pull Docker image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/myapp:${{ github.sha }} || { echo "Failed to pull Docker image"; exit 1; }

      # Create namespaces
      - name: Create namespaces
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            kubectl create namespace production || true
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            kubectl create namespace development || true
          fi

      # Validate Kubernetes connection
      - name: Validate Kubernetes connection
        run: kubectl get nodes

      # Deploy to Kubernetes (Development) using Helm
      - name: Deploy to Kubernetes (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          helm upgrade --install myapp-dev ./helm/app-chart --namespace development \
          --set image.tag=${{ github.sha }} \
          --set environment.APP_ENVIRONMENT=development \
          --set db.host=dev-db.example.com

      # Deploy to Kubernetes (Production) using Helm
      - name: Deploy to Kubernetes (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          # Update Helm dependencies
          helm dependency update ./helm/app-chart

          # Deploy the application
          helm upgrade --install myapp-prod ./helm/app-chart --namespace production \
          --set image.tag=${{ github.sha }} \
          --set environment.APP_ENVIRONMENT=production \
          --set db.host=prod-db.example.com \
          -f ./helm/app-chart/values-prod.yaml || { echo "Failed to deploy to production"; exit 1; }
        
      # Sync ArgoCD Application
      - name: Sync ArgoCD application
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          # Login and sync in one command
          argocd login argocd.example.com \
            --username admin \
            --password ${{ secrets.ARGOCD_AUTH_TOKEN }} \
            --insecure

          argocd app sync myapp \
            --server argocd.example.com \
            --insecure \
            || { echo "Failed to sync ArgoCD application"; exit 1; }