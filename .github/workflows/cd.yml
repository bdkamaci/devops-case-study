name: Python CD
on:
  push:
    branches: [ main, develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install kubectl
      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl" || { echo "Failed to download kubectl"; exit 1; }
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      
      # Install Kind
      - name: Set up Kind Kubernetes cluster
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Create Kind cluster
          kind create cluster --name github-actions-cluster
          
          # Get kubeconfig for the created cluster
          kind get kubeconfig --name github-actions-cluster > kubeconfig
          
          # Set KUBECONFIG environment variable
          export KUBECONFIG=$(pwd)/kubeconfig
          
          # Verify cluster is up
          kubectl get nodes

      # Install Helm
      - name: Set up Helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz || { echo "Failed to download Helm"; exit 1; }
          tar -zxvf helm-v3.6.3-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      # Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o /tmp/argocd
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd

      # Create ArgoCD namespace and install ArgoCD
      - name: Create ArgoCD namespace and install ArgoCD
        run: |
          kubectl get namespace argocd || kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || true

      # Wait for ArgoCD pods to be running
      - name: Wait for ArgoCD pods to be running
        run: |
          kubectl rollout status deployment/argocd-server -n argocd --timeout=300s

      # Check ArgoCD pod and service status
      - name: Check ArgoCD status
        run: |
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      # Get external IP of ArgoCD server
      - name: Get External IP for ArgoCD
        run: |
          export ARGOCD_EXTERNAL_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "ARGOCD_EXTERNAL_IP=$ARGOCD_EXTERNAL_IP" >> $GITHUB_ENV

      # Authenticate to ArgoCD
      - name: Login to ArgoCD
        run: |
          argocd login ${{ env.ARGOCD_EXTERNAL_IP }} \
            --username admin \
            --password ${{ secrets.ARGOCD_AUTH_TOKEN }} \
            --insecure    

      # Sync application with ArgoCD
      - name: Sync application with ArgoCD
        run: |
          argocd app sync myapp
          argocd app wait myapp --health --timeout 300